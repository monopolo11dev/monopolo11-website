# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Create and publish a Docker image

on:
  push:
    branches: ['main', 'dev']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    if: contains(github.event.head_commit.message,'chore(release):')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get npm version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            ${{ steps.package-version.outputs.current-version}}

      - name: Create env file
        run: |
          touch .env
          echo SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} >> .env

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    outputs:
      version: ${{ steps.package-version.outputs.current-version}}

  deployment:
    needs: build-and-push-image
    runs-on: self-hosted
    steps:
      - name: Invoke deployment hook
        run: |
          response=$(curl -I --location --request POST '${{ secrets.PORTAINER_WEBHOOK }}')
          echo $response

      - name: Wait for 1 minute
        run: sleep 45

      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          target_url: https://monopolo11.com
          environment: production
          description: Deployed version ${{ needs.build-and-push-image.outputs.version }}

      - name: Make HTTP request and validate version
        run: |
          response=$(curl -s https://monopolo11.com/status)
          version=$(echo $response | jq -r '.version')
          if [[ "$version" != ${{ needs.build-and-push-image.outputs.version }} ]]; then
            echo "Error: version $version is not supported"
            exit 1
          fi

      - name: Update deployment status (success)
        if: success()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: '${{ github.token }}'
          target_url: https://monopolo11.com
          state: 'success'
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: '${{ github.token }}'
          target_url: https://monopolo11.com
          state: 'failure'
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
